{"version":3,"sources":["Compoennts/Input/index.js","Features/Login/index.js","Features/Emojis/index.js","CustomHooks/useFetch.js","Features/Emojis/emojisWithCustomHooks.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","type","onChange","value","placeholder","placeHolder","onClick","Login","useState","name","setName","email","setEmail","toHome","setToHome","className","to","e","target","setTimeout","DataLoader","data","setData","count","setCount","searchTerm","setSearchTerm","loading","setLoading","useEffect","fetch","then","response","json","results","filter","item","toLowerCase","includes","length","href","map","el","key","codes","char","useFetch","url","searchKey","setLength","a","getData","DataLoaderWithCustomHooks","App","exact","path","component","Emojis","EmojisWithCustomHooks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3262e24.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Input (props){\n  return(\n    <div>\n      <input type={props.type} onChange={props.onChange} value={props.value} \n      placeholder={props.placeHolder} onClick={props.onClick}/>\n    </div>\n  )\n}\nexport default Input;","import React, {useState} from 'react';\nimport Input from 'Compoennts/Input'\nimport { Redirect } from 'react-router-dom';\nimport './index.css';\n\nfunction Login() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [toHome, setToHome] = useState(false);\n  return(\n    <div className=\"loginWrapper\">\n      <div className=\"loginContent\">\n        {toHome? <Redirect to=\"/emojis\" /> : null}\n        <Input onChange={(e)=> setName(e.target.value)} value={name} type=\"text\" placeHolder=\"Your Name\"/>\n        <Input onChange={(e)=> setEmail(e.target.value)} value={email} type=\"email\" placeHolder=\"Your Email\"/>\n        <button type=\"submit\" onClick={e => setTimeout(() => setToHome(true), 0) }>Submit</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Login;","import React, { useState, useEffect } from \"react\";\nimport Input from \"Compoennts/Input\";\nimport './index.css';\n\nfunction DataLoader() {\n  // useState Hooks\n  const [data, setData] = useState([]);\n  const [count, setCount] = useState(0);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [loading, setLoading] = useState(false)\n  \n  // useEffect Hook\n  useEffect(() => {\n    setLoading(true)\n    fetch(\"https://unpkg.com/emoji.json@13.0.0/emoji.json\")\n      .then(response => response.json())\n      .then(data => {\n        if(searchTerm){\n          const results = data.filter(item => item.name.toLowerCase().includes(searchTerm.toLowerCase()))\n          setData(results);\n          setCount(results.length)\n        }else{\n          setData(data)\n          setCount(data.length)\n        }\n        setLoading(false)\n      });\n  },[searchTerm]); // This array parameter is used to call the hook when passed meter got changed\n  \n  // Set searchTerm value on change using setSearchTerm Hook\n  const handleOnChnage =(e) =>{\n    setSearchTerm(e.target.value);\n  }\n\n  return (\n    <div>\n      <div className=\"header\">\n        <div>\n          <a href=\"/\">Home</a>\n          <a href=\"/emojis\">Emojis</a>\n          <a href=\"/emojisWithCustomHooks\">Emojis with custom hook</a>\n        </div>\n        <Input onChange={handleOnChnage} type=\"search\" placeHolder=\"Search...\"/>\n        <p>Total Results:  <b>{count}</b></p>\n      </div>\n      {loading ? <div className=\"App\"> <p>Loading...</p> </div> : \n          <ul className=\"list\">\n            {data.map(el => (\n              <li key={el.codes}>\n                <p>{el.char}</p>\n                <span>{el.name}</span>\n              </li>\n            ))}\n          </ul>\n      }\n    </div>\n  );\n}\n\nexport default DataLoader;","// useFetch.js\nimport { useState, useEffect } from \"react\";\n\nexport default function useFetch(url, searchKey) {\n  debugger\n  const [data, setData] = useState([]);\n  const [length, setLength] = useState(0);\n  const [loading, setLoading] = useState(false)\n  \n  async function getData() {\n    setLoading(true);\n    const response = await fetch(url);\n    const data = await response.json();\n    if(searchKey.length  > 2){\n      const results = data.filter(item => item.name.toLowerCase().includes(searchKey.toLowerCase()))\n      setData(results);\n      setLength(results.length)\n    }else{\n      setData(data);\n      setLength(data.length)\n    }\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    getData();\n  }, [searchKey]);\n\n  return {data, length, loading};\n}","import React, { useState, useEffect } from \"react\";\nimport Input from \"Compoennts/Input\";\nimport './index.css';\nimport useFetch from 'CustomHooks/useFetch';\n\nfunction DataLoaderWithCustomHooks() {\n  \n  // useState Hook\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  \n  // Set searchTerm value on change using setSearchTerm Hook\n  const handleOnChnage =(e) =>{\n    setSearchTerm(e.target.value);\n  }\n  //  Call this custom hook  useFetch to fetch all/filtered data and use it.\n  const {data, length, loading} = useFetch(\"https://unpkg.com/emoji.json@13.0.0/emoji.json\", searchTerm);\n  \n  return (\n    <div>\n      <div className=\"header\">\n        <div>\n          <a href=\"/\">Home</a>\n          <a href=\"/emojis\">Emojis</a>\n          <a href=\"/emojisWithCustomHooks\">Emojis with custom hook</a>\n        </div>\n        <Input onChange={handleOnChnage} type=\"search\" placeHolder=\"Search...\"/>\n        <p>Total Results:  <b>{length}</b></p>\n      </div>\n      {loading ? <div className=\"App\"> <p>Loading...</p> </div> : \n          <ul className=\"list\">\n            {data.map(el => (\n              <li key={el.codes}>\n                <p>{el.char}</p>\n                <span>{el.name}</span>\n              </li>\n            ))}\n          </ul>\n      }\n    </div>\n  );\n}\n\nexport default DataLoaderWithCustomHooks;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Login from 'Features/Login';\nimport Emojis from 'Features/Emojis';\nimport EmojisWithCustomHooks from 'Features/Emojis/emojisWithCustomHooks'\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Login} />\n        <Route exact path=\"/emojis\" component={Emojis} />\n        <Route exact path=\"/emojisWithCustomHooks\" component={EmojisWithCustomHooks} />\n      </Switch>\n    </BrowserRouter>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}